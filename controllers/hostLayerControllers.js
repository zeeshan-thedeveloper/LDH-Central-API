// addHostInRequestList
// it will generate a unique id .. which will be as communication channel id
// connectHostToAdmin
// it will create rabitMQ queue .. and will make flag true : isConnected
// isHostConnected
// Note : communication will be done by using socket.io
const { v1: uuidv1, v4: uuidv4 } = require("uuid");
const { hosts_info_list_cache } = require("../cache-store/cache");
const { addOrUpdate_host_info_list_cache } = require("../cache-store/cache-operations");
const {
  admin_users_schema,
} = require("../mongodb/schemas/admin-schemas/admin-users");
const {
  host_users_schema,
} = require("../mongodb/schemas/host-schemas/host-users");
const {
  COULD_NOT_CREATE_ACCOUNT,
  ACCONT_CREATED,
  ALREADY_CREATED_ACCOUNT,
  FETCHED,
  DATA_UPDATED,
} = require("./responses/responses");

const addHostInRequestList = (req, res) => {
  const { adminId,hostDeviceId ,hostId } = req.body;

  // Checking if already have created or requested or not?
  host_users_schema.findOne({ hostId: hostId }, (err, data) => {
    if (data == null) {
      const dataToInsert = {
        // hostDeviceId: hostDeviceId,
        hostId: hostId, //this will be given to host when it will first time connec to central api or ... it will get installed .. note that it will be generated by central api
        connectedAdmin: adminId,
        isConnected: false,
      };
      // Creating account for host
      host_users_schema.create(dataToInsert, async (err, insertedData) => {
        if (!err) {
          // updating the targeted admin
          const record = await admin_users_schema.findOneAndUpdate(
            { _id: adminId },
            { 
              $push: {
                connectedHostList: hostId, //inserted data is the object to be inserted
              },
            },
            { new: true }
          );
          if (record) {
            // updated the admin
            addOrUpdate_host_info_list_cache(hostId, hostDeviceId);
            res.status(200).send({
              responseMessage: " Host added to waiting list successfully",
              responseCode: ACCONT_CREATED,
              responsePayload: insertedData,
            });
          } else {
            res.status(200).send({
              responseMessage: "Could not update the admin record",
              responseCode: ACCONT_CREATED,
              responsePayload: insertedData,
            });
          }
        } else {
          res.status(501).send({
            responseMessage:
              " Could not add add host  to waiting list successfully",
            responseCode: COULD_NOT_CREATE_ACCOUNT,
            responsePayload: err,
          });
        }
      });
    } else {
      res.status(200).send({
        responseMessage: " Already request",
        responseCode: ALREADY_CREATED_ACCOUNT,
        responsePayload: data,
      });
    }
  });
};

const connectHostToAdmin = (req, res) => {
  res.send("connectHostToAdmin");
};

const isHostConnected = (req, res) => {
  res.send("isHostConnected");
};

const getUniqueId = (req, res) => {
  const uid = uuidv1();
  res.status(200).send({
    responseMessage:"Successfully generated unique id",
    responseCode:FETCHED,
    payload:uid
  })
}

const updateDeviceIdInCache = (req, res)=>{
  const {hostId,hostDeviceId} = req.body;
  addOrUpdate_host_info_list_cache(hostId, hostDeviceId);
  res.status(200).send({
    responseMessage:`Successfully updated the device id : ${hostDeviceId}  `,
    responseCode:DATA_UPDATED
  })
}

const getInfo = (req, res) => {
  let  list = hosts_info_list_cache.get("hosts_info_list_cache") 
  res.status(200).send({
    host_cache_list:list
  }) 
}

module.exports = {
  addHostInRequestList,
  connectHostToAdmin,
  isHostConnected,
  getUniqueId,
  updateDeviceIdInCache,
  getInfo
};
