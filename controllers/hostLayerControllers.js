// addHostInRequestList
    // it will generate a unique id .. which will be as communication channel id
// connectHostToAdmin
    // it will create rabitMQ queue .. and will make flag true : isConnected
// isHostConnected
// Note : communication will be done by using socket.io
const { 
    v1: uuidv1,
    v4: uuidv4,
  } = require('uuid');
const { admin_users_schema } = require('../mongodb/schemas/admin-schemas/admin-users');
const { host_users_schema } = require('../mongodb/schemas/host-schemas/host-users');
const { COULD_NOT_CREATE_ACCOUNT, ACCONT_CREATED, ALREADY_CREATED_ACCOUNT } = require('./responses/responses');

const addHostInRequestList = (req, res)=>{
    const {adminId,hostName,hostId} = req.body;

    /*
    {
        hostName:,
        hostId,
        connectedAdmin,
        isConnected,
        notificationQueueId
    } 
    */

    const notificationQueueId = uuidv1();
    
    // Checking if already have created or requested or not?
    host_users_schema.findOne({hostId:hostId},(err,data)=>{
       if(data==null){
        const dataToInsert={
            hostName:hostName,
            hostId:hostId, //this will be given to host when it will first time connec to central api or ... it will get installed .. note that it will be generated by central api
            connectedAdmin:adminId,
            isConnected:false,
            notificationQueueId:notificationQueueId
        }
        // Creating account for host
        host_users_schema.create(dataToInsert,async (err, insertedData)=>{
        if(!err) {

            // updating the targeted admin
            const record = await admin_users_schema.findOneAndUpdate(
                { _id: adminId },
                {
                    $push : {
                        connectedHostList :  hostId//inserted data is the object to be inserted 
                      }
                },
                { new: true }
              );
            if(record) {
                // updated the admin
                res.status(200).send({
                    responseMessage:" Host added to waiting list successfully",
                    responseCode:ACCONT_CREATED,
                    responsePayload:insertedData
                })
            } else{
                res.status(200).send({
                    responseMessage:"Could not update the admin record",
                    responseCode:ACCONT_CREATED,
                    responsePayload:insertedData
                })
            }
            
        }
        else{
            res.status(501).send({
                responseMessage:" Could not add add host  to waiting list successfully",
                responseCode:COULD_NOT_CREATE_ACCOUNT,
                responsePayload:err
            })
        }

    })}
       
       else{
        res.status(200).send({
            responseMessage:" Already request",
            responseCode:ALREADY_CREATED_ACCOUNT,
            responsePayload:data
        })
       }
    }) 
}

const connectHostToAdmin = (req, res)=>{
    res.send("connectHostToAdmin");
}

const isHostConnected = (req, res)=>{
    res.send("isHostConnected");
}

module.exports = {
    addHostInRequestList,connectHostToAdmin,isHostConnected
}